# Task ID: 25
# Title: Implement integration tests for Dagster assets
# Status: pending
# Dependencies: 19, 20, 21, 22, 23
# Priority: medium
# Description: Create integration tests for the Dagster assets to verify end-to-end functionality.
# Details:
1. Create tests/ncaa_basketball_pipeline/test_assets.py:
```python
import pytest
from dagster import build_asset_context, materialize_to_memory
import duckdb
import os
from unittest.mock import patch
from pathlib import Path

# Import the assets and definitions
from ncaa_basketball_pipeline.ncaa_basketball_pipeline.assets import (
    espn_bronze_assets_definition,
    espn_bronze_partitioned_assets_definition
)
from ncaa_basketball_pipeline.ncaa_basketball_pipeline.definitions import dlt_resource

# Setup a test database
@pytest.fixture
def test_db_path():
    db_path = "test_ncaa_basketball.duckdb"
    # Ensure the database doesn't exist before the test
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # Set the environment variable for the test database
    os.environ["DESTINATION__DUCKDB__CREDENTIALS__DATABASE"] = db_path
    
    yield db_path
    
    # Clean up after the test
    if os.path.exists(db_path):
        os.remove(db_path)

# Test the non-partitioned assets
def test_espn_bronze_assets(test_db_path):
    # Mock the API responses to avoid actual API calls
    with patch("ncaa_basketball_pipeline.dlt_sources.espn_api_source.make_api_request") as mock_request:
        # Set up mock responses for different API endpoints
        def mock_api_response(url, params=None):
            if "seasons" in url:
                with open(Path(__file__).parent / "mock_data" / "seasons.json", "r") as f:
                    return json.load(f)
            # ... handle other endpoints
            return {}
        
        mock_request.side_effect = mock_api_response
        
        # Create a context for the asset
        context = build_asset_context()
        
        # Materialize the asset
        result = materialize_to_memory(
            [espn_bronze_assets_definition],
            resources={"dlt_resource": dlt_resource}
        )
        
        # Verify the asset materialized successfully
        assert result.success
        
        # Verify data was loaded into the database
        conn = duckdb.connect(test_db_path)
        
        # Check that the bronze schema was created
        schema_result = conn.execute("SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'bronze'").fetchall()
        assert len(schema_result) == 1
        
        # Check that tables were created
        tables_result = conn.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'bronze'").fetchall()
        assert len(tables_result) > 0
        
        # Check specific tables
        assert ('seasons',) in tables_result
        assert ('season_types',) in tables_result
        # ... check for other tables
        
        # Check that data was loaded
        seasons_count = conn.execute("SELECT COUNT(*) FROM bronze.seasons").fetchone()[0]
        assert seasons_count > 0
        
        conn.close()

# Test the partitioned assets
def test_espn_bronze_partitioned_assets(test_db_path):
    # Similar to the non-partitioned test, but with a partition key
    with patch("ncaa_basketball_pipeline.dlt_sources.espn_api_source.make_api_request") as mock_request:
        # Set up mock responses
        # ...
        
        # Create a context with a partition key
        context = build_asset_context(partition_key="2023-03-01")
        
        # Materialize the asset
        result = materialize_to_memory(
            [espn_bronze_partitioned_assets_definition],
            resources={"dlt_resource": dlt_resource}
        )
        
        # Verify the asset materialized successfully
        assert result.success
        
        # Verify data was loaded for the specific partition
        # ...
```
2. Create a mock_data directory with JSON files containing sample API responses for testing:
   - tests/ncaa_basketball_pipeline/mock_data/seasons.json
   - tests/ncaa_basketball_pipeline/mock_data/events.json
   - etc.

# Test Strategy:
Run the integration tests with pytest to verify that the Dagster assets correctly load data into the DuckDB database. Test both non-partitioned and partitioned assets. Verify that the data is loaded into the correct tables with the expected structure.
