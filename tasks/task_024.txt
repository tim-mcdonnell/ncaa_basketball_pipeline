# Task ID: 24
# Title: Implement unit tests for ESPN API source
# Status: pending
# Dependencies: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
# Priority: medium
# Description: Create comprehensive unit tests for the ESPN API source functions using mock API responses.
# Details:
1. Create tests/dlt_sources/test_espn_api_source.py:
```python
import pytest
import dlt
from unittest.mock import patch, MagicMock
import json
import os
from pathlib import Path

# Import the source module
from ncaa_basketball_pipeline.dlt_sources.espn_api_source import (
    espn_ncaa_basketball_source,
    make_api_request,
    seasons,
    season_types,
    weeks,
    teams,
    events,
    competitors,
    scores,
    team_statistics,
    player_statistics,
    # ... other resources
)

# Load mock data from JSON files
@pytest.fixture
def mock_data_dir():
    return Path(__file__).parent / "mock_data"

@pytest.fixture
def mock_seasons_response(mock_data_dir):
    with open(mock_data_dir / "seasons.json", "r") as f:
        return json.load(f)

# ... other fixtures for different response types

# Test the make_api_request function
def test_make_api_request():
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.json.return_value = {"test": "data"}
        mock_get.return_value = mock_response
        
        result = make_api_request("https://test.url")
        
        assert result == {"test": "data"}
        mock_get.assert_called_once_with("https://test.url", params=None)

# Test the seasons resource
def test_seasons_resource(mock_seasons_response):
    with patch("ncaa_basketball_pipeline.dlt_sources.espn_api_source.make_api_request") as mock_request:
        mock_request.return_value = mock_seasons_response
        
        # Convert generator to list to execute it
        result = list(seasons("https://test.url"))
        
        # Verify the results
        assert len(result) == len(mock_seasons_response.get("seasons", []))
        for i, season in enumerate(mock_seasons_response.get("seasons", [])):
            assert result[i] == season

# ... similar tests for other resources

# Test the source function
def test_espn_ncaa_basketball_source():
    source = espn_ncaa_basketball_source()
    
    # Verify the source contains all expected resources
    assert "seasons" in source
    assert "season_types" in source
    assert "weeks" in source
    assert "teams" in source
    assert "events" in source
    # ... check for other resources
```
2. Create a mock_data directory with JSON files containing sample API responses for testing:
   - tests/dlt_sources/mock_data/seasons.json
   - tests/dlt_sources/mock_data/season_types.json
   - tests/dlt_sources/mock_data/weeks.json
   - etc.

# Test Strategy:
Run the unit tests with pytest to verify that all source functions work correctly with mock data. Test both happy paths and error handling. Ensure that all resources extract and transform data correctly.
