# Task ID: 16
# Title: Implement Dagster Schedules
# Status: pending
# Dependencies: 14, 15
# Priority: medium
# Description: Create Dagster schedules for automatically materializing assets based on the data freshness requirements.
# Details:
Update the definitions.py file in the ncaa_basketball_pipeline directory to include schedules:

```python
from dagster import Definitions, ScheduleDefinition, define_asset_job
from dagster_embedded_elt.dlt import DagsterDltResource

from .assets import espn_bronze_assets_definition, espn_bronze_partitioned_assets_definition

# Define jobs for the assets
full_load_job = define_asset_job(name="full_load_job", selection="bronze_espn_assets")
daily_update_job = define_asset_job(name="daily_update_job", selection="bronze_espn_partitioned_assets")

# Define schedules
weekly_full_load_schedule = ScheduleDefinition(
    job=full_load_job,
    cron_schedule="0 0 * * 0",  # Weekly on Sunday at midnight
    name="weekly_full_load"
)

daily_update_schedule = ScheduleDefinition(
    job=daily_update_job,
    cron_schedule="0 6 * * *",  # Daily at 6 AM
    name="daily_update"
)

# Create the DLT resource
dlt_resource = DagsterDltResource()

# Define the Dagster definitions
defs = Definitions(
    assets=[espn_bronze_assets_definition, espn_bronze_partitioned_assets_definition],
    resources={
        "dlt_resource": dlt_resource,
    },
    schedules=[weekly_full_load_schedule, daily_update_schedule]
)
```

This defines two schedules:
1. A weekly full load schedule that runs every Sunday at midnight
2. A daily update schedule that runs every day at 6 AM

The schedules are added to the Dagster Definitions object along with the assets and resources.

# Test Strategy:
Verify that the schedules are correctly defined and can be enabled in the Dagster UI. Test that they trigger the appropriate jobs at the scheduled times.
