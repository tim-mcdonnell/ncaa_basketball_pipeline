# Task ID: 11
# Title: Implement Error Handling and Retry Logic
# Status: pending
# Dependencies: 4, 5, 6, 7, 8, 9, 10
# Priority: high
# Description: Enhance the ESPN API source with robust error handling and retry logic to handle API failures and rate limiting.
# Details:
Implement a retry decorator and error handling for all API requests in the ESPN API source:

```python
import time
from functools import wraps
from requests.exceptions import RequestException

def retry_with_backoff(max_retries=3, initial_backoff=1, backoff_factor=2):
    """Decorator for retrying API requests with exponential backoff"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            retries = 0
            backoff = initial_backoff
            while retries <= max_retries:
                try:
                    return func(*args, **kwargs)
                except RequestException as e:
                    retries += 1
                    if retries > max_retries:
                        raise
                    # Check for rate limiting (HTTP 429)
                    if hasattr(e, 'response') and e.response is not None and e.response.status_code == 429:
                        # Use retry-after header if available
                        retry_after = int(e.response.headers.get('Retry-After', backoff))
                        time.sleep(retry_after)
                    else:
                        # Exponential backoff for other errors
                        time.sleep(backoff)
                        backoff *= backoff_factor
        return wrapper
    return decorator

# Apply the decorator to a helper function for making API requests
@retry_with_backoff()
def make_api_request(url, params=None):
    """Make an API request with retry logic"""
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()
```

Then update all resource functions to use this helper function instead of direct requests.get() calls. For example:

```python
@dlt.resource(
    primary_key=["id"],
    write_disposition="merge"
)
def seasons():
    """Fetch available seasons"""
    data = make_api_request(f"{base_url}/seasons")
    return data["seasons"]
```

Also, add comprehensive error handling within each resource function to handle unexpected data structures or missing fields.

# Test Strategy:
Test the retry logic with mocked API responses that simulate rate limiting (HTTP 429) and other common errors. Verify that the backoff mechanism works correctly and that the code eventually succeeds or fails appropriately.
