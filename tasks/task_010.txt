# Task ID: 10
# Title: Implement Leaders and Scores Resources
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Extend the ESPN API source with resources for fetching game leaders and detailed scores.
# Details:
Add new resources to the espn_ncaa_basketball_source for fetching game leaders and detailed scores:

```python
@dlt.resource(
    primary_key=["event_id", "team_id", "category"],
    write_disposition="merge"
)
def leaders(event_id: str, event_data: Dict):
    """Extract leader information from event data"""
    leaders_data = []
    for competition in event_data.get("competitions", []):
        for leader_category in competition.get("leaders", []):
            category = leader_category.get("name")
            for team_leader in leader_category.get("leaders", []):
                for athlete in team_leader.get("athletes", []):
                    leader = {
                        "event_id": event_id,
                        "team_id": team_leader.get("team", {}).get("id"),
                        "category": category,
                        "athlete_id": athlete.get("id"),
                        "athlete_name": athlete.get("fullName"),
                        "value": team_leader.get("value")
                    }
                    leaders_data.append(leader)
    return leaders_data

@dlt.resource(
    primary_key=["event_id", "team_id", "period_number"],
    write_disposition="merge"
)
def linescores(event_id: str, event_data: Dict):
    """Extract period-by-period scores from event data"""
    linescores_data = []
    for competition in event_data.get("competitions", []):
        for competitor in competition.get("competitors", []):
            team_id = competitor.get("id")
            for period, score in enumerate(competitor.get("linescores", []), 1):
                linescore = {
                    "event_id": event_id,
                    "team_id": team_id,
                    "period_number": period,
                    "score": score.get("value")
                }
                linescores_data.append(linescore)
    return linescores_data
```

Then update the source function to include these resources:

```python
# Return all resources
return {
    "seasons": seasons,
    "season_types": season_types,
    "weeks": weeks,
    "events": events,
    "event_competitors": event_competitors,
    "teams": teams,
    "event_details": event_details,
    "team_details": team_details,
    "team_roster": team_roster,
    "team_statistics": team_statistics,
    "player_statistics": player_statistics,
    "plays": plays,
    "venues": venues,
    "team_records": team_records,
    "leaders": leaders,
    "linescores": linescores,
    # Add more resources
}
```

# Test Strategy:
Test the leaders and linescores resources with mock API responses. Verify that they correctly extract and structure the data.
